{"ast":null,"code":"// Modules to control application life and create native browser window\nconst {\n  app,\n  BrowserWindow\n} = require(\"electron\");\nconst path = require(\"path\"); // Corrected the path module import\n\nconst createWindow = () => {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, \"preload.js\"),\n      nodeIntegration: true,\n      // Consider security implications\n      contextIsolation: false // Consider security implications\n    }\n  });\n\n  // Import `electron-is-dev` using dynamic import to avoid issues with ESM\n  import(\"electron-is-dev\").then(isDev => {\n    mainWindow.loadURL(isDev.default ? \"http://localhost:3000\" : `file://${path.join(__dirname, \"../build/index.html\")}`);\n  }).catch(err => console.error(\"Failed to load isDev:\", err));\n\n  // Open the DevTools.\n  // mainWindow.webContents.openDevTools();\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(createWindow);\napp.on(\"activate\", () => {\n  // On macOS it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.","map":{"version":3,"names":["app","BrowserWindow","require","path","createWindow","mainWindow","width","height","webPreferences","preload","join","__dirname","nodeIntegration","contextIsolation","then","isDev","loadURL","default","catch","err","console","error","whenReady","on","getAllWindows","length","process","platform","quit"],"sources":["/Users/trinity/Documents/Project/photobooth/public/electron.js"],"sourcesContent":["// Modules to control application life and create native browser window\nconst { app, BrowserWindow } = require(\"electron\");\nconst path = require(\"path\"); // Corrected the path module import\n\nconst createWindow = () => {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, \"preload.js\"),\n      nodeIntegration: true, // Consider security implications\n      contextIsolation: false, // Consider security implications\n    },\n  });\n\n  // Import `electron-is-dev` using dynamic import to avoid issues with ESM\n  import(\"electron-is-dev\")\n    .then((isDev) => {\n      mainWindow.loadURL(isDev.default ? \"http://localhost:3000\" : `file://${path.join(__dirname, \"../build/index.html\")}`);\n    })\n    .catch((err) => console.error(\"Failed to load isDev:\", err));\n\n  // Open the DevTools.\n  // mainWindow.webContents.openDevTools();\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(createWindow);\n\napp.on(\"activate\", () => {\n  // On macOS it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n"],"mappings":"AAAA;AACA,MAAM;EAAEA,GAAG;EAAEC;AAAc,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClD,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;;AAE9B,MAAME,YAAY,GAAGA,CAAA,KAAM;EACzB;EACA,MAAMC,UAAU,GAAG,IAAIJ,aAAa,CAAC;IACnCK,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,cAAc,EAAE;MACdC,OAAO,EAAEN,IAAI,CAACO,IAAI,CAACC,SAAS,EAAE,YAAY,CAAC;MAC3CC,eAAe,EAAE,IAAI;MAAE;MACvBC,gBAAgB,EAAE,KAAK,CAAE;IAC3B;EACF,CAAC,CAAC;;EAEF;EACA,MAAM,CAAC,iBAAiB,CAAC,CACtBC,IAAI,CAAEC,KAAK,IAAK;IACfV,UAAU,CAACW,OAAO,CAACD,KAAK,CAACE,OAAO,GAAG,uBAAuB,GAAI,UAASd,IAAI,CAACO,IAAI,CAACC,SAAS,EAAE,qBAAqB,CAAE,EAAC,CAAC;EACvH,CAAC,CAAC,CACDO,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC,CAAC;;EAE9D;EACA;AACF,CAAC;;AAED;AACA;AACA;AACAnB,GAAG,CAACsB,SAAS,CAAC,CAAC,CAACR,IAAI,CAACV,YAAY,CAAC;AAElCJ,GAAG,CAACuB,EAAE,CAAC,UAAU,EAAE,MAAM;EACvB;EACA;EACA,IAAItB,aAAa,CAACuB,aAAa,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9CrB,YAAY,CAAC,CAAC;EAChB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACAJ,GAAG,CAACuB,EAAE,CAAC,mBAAmB,EAAE,MAAM;EAChC,IAAIG,OAAO,CAACC,QAAQ,KAAK,QAAQ,EAAE;IACjC3B,GAAG,CAAC4B,IAAI,CAAC,CAAC;EACZ;AACF,CAAC,CAAC;;AAEF;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}